df.exp <- cbind(data.frame(mkGrid(var_list)),t(getEl(var_list, "frozen")))
setDT(df.exp)
kpn_on_slurm <- function(h, zeta, n1, n2, data, run, b){
set.seed(run)
# Get the data
if (data == "kpn"){
dt <- fread("/home/u158395/post_kdd/karba_prepared.csv")
dt[, churn := ifelse(churn==1, 0, 1)]
X <- dt[, .SD, .SDcols = !c('churn', "treatment")]
z <- dt[, treatment]
y <- dt[, churn]
} else {
dt <- readRDS("/home/u158395/criteo/data/prepared_criteo/dt.Rds")
dt <- dt[sample(.N, 5e4)]
X <- dt[, .SD, .SDcols = !c('visit', "treatment", "conversion", "treatment_prime","exposure")]
z <- dt[, treatment]
y <- dt[, visit]
}
data_lista <- list("X" = X,
"y" = y,
"z" = z,
"N" = nrow(X),
p=0,
"real" = T)
dgp.data  <- dgp(data_lista)
s.data    <- split_data(dgp.data, n1=n1, real=T)
m1 <- train_model(s.data[["experimentation"]])
tau.train.preds <- predict_ite(s.data[["experimentation"]], m1)
tau.test.preds  <- predict_ite(s.data[["rollout"]], m1)
print("Start model on GD")
theta.list <- fit_gradient_descent(X=s.data[["experimentation"]][["X"]],
tau_predictions=tau.train.preds$tau,
weight_types = zeta)
thetas <- theta.list$thetas
l1 <- theta.list$lambda
# set.seed(run)
if (zeta>0){
selections_to_run <- c("emcite")
} else{
selections_to_run <- c("random", "variance", "type-s", "emcite")
}
selections <-
sapply(selections_to_run,function(x)
af(
s.data,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = zeta,
parallel = T,
lambda = l1,
B=b
),
simplify = F, USE.NAMES = T)
results <- sapply(selections,
function(x)
retrain_and_metrics(
sampling_data(
s.data,
x,
active = h,
train_predictions = tau.train.preds,
test_predictions   = tau.test.preds
)
),
simplify = F, USE.NAMES = T)
saveRDS(results, paste0("~/results/final_", paste(c(data, h, zeta, n1, n2, run, ".Rds"), collapse = "_")))
return(results)
}
sl <- slurm_apply(kpn_on_slurm, params = df.exp, nodes = 200,
cpus_per_node = 16,
pkgs = c("emcite", "reticulate", "data.table", "BART",
"glmnet", "uplift", "uplifteval"), submit = F,
sh_template = "../parallel/our_template.sh",
rscript_path = "/sw/arch/Debian9/EB_production/2019/software/R/3.5.1-foss-2018b/lib64/R/bin/Rscript",
jobname = paste0("all_", dtype, "_",),
slurm_options = list(time = "07:00:00")
)
sl <- slurm_apply(kpn_on_slurm, params = df.exp, nodes = 200,
cpus_per_node = 16,
pkgs = c("emcite", "reticulate", "data.table", "BART",
"glmnet", "uplift", "uplifteval"), submit = F,
sh_template = "../parallel/our_template.sh",
rscript_path = "/sw/arch/Debian9/EB_production/2019/software/R/3.5.1-foss-2018b/lib64/R/bin/Rscript",
jobname = paste0("all_", dtype, "_"),
slurm_options = list(time = "07:00:00")
)
# h: {T, F}
# zeta: {0,5}
# B: {5}
# n1: {300, 500, 1000, 2000, 5000, 10000}
# n2: {100, 500, 1000, 5000}
# evaluation criteria:
# {risk(/reward of policy (eq. 21 of https://arxiv.org/pdf/2001.07426.pdf), sampling Qini, rollout Qini}
dtype<- "kpn"
var_list <- varlist(
n.sim    = list(type="N",value=1000),
h    = list(type="grid", value=c(T, F), expr=quote(h(.))),
# zeta = list(type="frozen", value=c(0)),
# n1   = list(type="frozen", value=c(700), expr=quote(n_1)),
# n2   = list(type="frozen", value=c(2), expr=quote(n_2)),
zeta = list(type="grid", value=c(0,5)),
n1   = list(type="grid", value=c(300, 500, 1000, 2000, 5000, 10000), expr=quote(n_1)),
n2   = list(type="grid", value=c(100, 500, 1000, 5000), expr=quote(n_2)),
b = list(type="frozen", value=c(5)),
data = list(type="grid", value=c(dtype)),
#,
run = list(type="grid", value=c(1:100))#,
# N = list(value=1000),
# n1 = list(type="grid", value=c(10, 25))
)
df.exp <- cbind(data.frame(mkGrid(var_list)),t(getEl(var_list, "frozen")))
setDT(df.exp)
var_list
df.exp <- cbind(data.frame(mkGrid(var_list)),t(getEl(var_list, "frozen")))
setDT(df.exp)
df.exp
kpn_on_slurm <- function(h, zeta, n1, n2, data, run, b){
set.seed(run)
# Get the data
if (data == "kpn"){
dt <- fread("/home/u158395/post_kdd/karba_prepared.csv")
dt[, churn := ifelse(churn==1, 0, 1)]
X <- dt[, .SD, .SDcols = !c('churn', "treatment")]
z <- dt[, treatment]
y <- dt[, churn]
} else {
dt <- readRDS("/home/u158395/criteo/data/prepared_criteo/dt.Rds")
dt <- dt[sample(.N, 5e4)]
X <- dt[, .SD, .SDcols = !c('visit', "treatment", "conversion", "treatment_prime","exposure")]
z <- dt[, treatment]
y <- dt[, visit]
}
data_lista <- list("X" = X,
"y" = y,
"z" = z,
"N" = nrow(X),
p=0,
"real" = T)
dgp.data  <- dgp(data_lista)
s.data    <- split_data(dgp.data, n1=n1, real=T)
m1 <- train_model(s.data[["experimentation"]])
tau.train.preds <- predict_ite(s.data[["experimentation"]], m1)
tau.test.preds  <- predict_ite(s.data[["rollout"]], m1)
print("Start model on GD")
theta.list <- fit_gradient_descent(X=s.data[["experimentation"]][["X"]],
tau_predictions=tau.train.preds$tau,
weight_types = zeta)
thetas <- theta.list$thetas
l1 <- theta.list$lambda
# set.seed(run)
if (zeta>0){
selections_to_run <- c("emcite")
} else{
selections_to_run <- c("random", "variance", "type-s", "emcite")
}
selections <-
sapply(selections_to_run,function(x)
af(
s.data,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = zeta,
parallel = T,
lambda = l1,
B=b
),
simplify = F, USE.NAMES = T)
results <- sapply(selections,
function(x)
retrain_and_metrics(
sampling_data(
s.data,
x,
active = h,
train_predictions = tau.train.preds,
test_predictions   = tau.test.preds
)
),
simplify = F, USE.NAMES = T)
saveRDS(results, paste0("~/results/final_", paste(c(data, h, zeta, n1, n2, run, ".Rds"), collapse = "_")))
return(results)
}
sl <- slurm_apply(kpn_on_slurm, params = df.exp, nodes = 200,
cpus_per_node = 16,
pkgs = c("emcite", "reticulate", "data.table", "BART",
"glmnet", "uplift", "uplifteval"), submit = F,
sh_template = "../parallel/our_template.sh",
rscript_path = "/sw/arch/Debian9/EB_production/2019/software/R/3.5.1-foss-2018b/lib64/R/bin/Rscript",
jobname = paste0("all_", dtype, "_"),
slurm_options = list(time = "07:00:00")
)
6000/24
knitr::opts_chunk$set(echo = TRUE)
# Set up python
set.seed(123)
library(emcite)
use_python("/opt/anaconda3/bin/python")
N <- 1000
n1 <- 200
n2 <- 25
td <- dgp(list("N"=N,"p"=4, "covariate"="linear", "y_mean"="linear", "ite"="linear"))
td <- dgp(list("N"=N,"p"=4, "covariate"="linear", "y_mean"="linear", "ite"="linear", "real"=F))
s.td <- split_data(td, n1=n1)
m1 <- train_model(s.td[["experimentation"]])
tau.train.preds <- predict_ite(s.td[["experimentation"]], m1)
tau.test.preds  <- predict_ite(s.td[["rollout"]], m1)
thetas <- fit_gradient_descent(X=s.td[["experimentation"]][["X"]],
tau_predictions=tau.train.preds$tau,
weight_types = 5)
source('~/Desktop/emcite/R/models.R')
thetas <- fit_gradient_descent(X=s.td[["experimentation"]][["X"]],
tau_predictions=tau.train.preds$tau,
weight_types = 5)
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.td,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5
), simplify = F, USE.NAMES = T)
source('~/Desktop/emcite/R/models.R')
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.td,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5,
parallel = F
), simplify = F, USE.NAMES = T)
af(
s.td,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5,
parallel = F
)
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.td,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5,
parallel = F
), simplify = F, USE.NAMES = T)
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.td,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5,
parallel = T
), simplify = F, USE.NAMES = T)
source('~/Desktop/emcite/R/models.R')
source('~/Desktop/emcite/R/models.R')
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.td,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5,
parallel = T
), simplify = F, USE.NAMES = T)
source('~/Desktop/emcite/R/models.R')
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.td,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5,
parallel = T
), simplify = F, USE.NAMES = T)
source('~/Desktop/emcite/R/models.R')
), simplify = F, USE.NAMES = T)
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.td,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5,
parallel = T
), simplify = F, USE.NAMES = T)
source('~/Desktop/emcite/R/models.R')
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.td,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5,
parallel = T
), simplify = F, USE.NAMES = T)
source('~/Desktop/emcite/R/models.R')
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.td,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5,
parallel = T
), simplify = F, USE.NAMES = T)
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.td,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5,
parallel = F
), simplify = F, USE.NAMES = T)
source('~/Desktop/emcite/R/models.R')
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.td,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5,
parallel = F
), simplify = F, USE.NAMES = T)
source('~/Desktop/emcite/R/models.R')
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.td,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5,
parallel = F
), simplify = F, USE.NAMES = T)
source('~/Desktop/emcite/R/models.R')
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.td,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5,
parallel = F
), simplify = F, USE.NAMES = T)
source('~/Desktop/emcite/R/models.R')
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.td,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5,
parallel = F
), simplify = F, USE.NAMES = T)
thetas
source('~/Desktop/emcite/R/models.R')
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.td,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5,
parallel = F
), simplify = F, USE.NAMES = T)
source('~/Desktop/emcite/R/models.R')
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.td,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5,
parallel = F
), simplify = F, USE.NAMES = T)
source('~/Desktop/emcite/R/models.R')
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.td,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5,
parallel = F
), simplify = F, USE.NAMES = T)
source('~/Desktop/emcite/R/models.R')
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.td,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5,
parallel = F,R=F
), simplify = F, USE.NAMES = T)
library(emcite)
library(emcite)
source('~/Desktop/emcite/R/models.R')
source('~/Desktop/emcite/R/models.R')
library(emcite)
knitr::opts_chunk$set(echo = TRUE)
set.seed(123)
library(emcite)
use_python("/opt/anaconda3/bin/python")
N <- 1000
n1 <- 200
n2 <- 25
td <- dgp(list("N"=N,"p"=4, "covariate"="linear", "y_mean"="linear", "ite"="linear", "real"=F))
s.td <- split_data(td, n1=n1)
m1 <- train_model(s.td[["experimentation"]])
tau.train.preds <- predict_ite(s.td[["experimentation"]], m1)
tau.test.preds  <- predict_ite(s.td[["rollout"]], m1)
thetas <- fit_gradient_descent(X=s.td[["experimentation"]][["X"]],
tau_predictions=tau.train.preds$tau,
weight_types = 5)
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.td,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5,
parallel = F,R=F
), simplify = F, USE.NAMES = T)
# With assignment function "turned on"
results <- sapply(selections,
function(x)
retrain_and_metrics(
sampling_data(
s.td,
x,
active = T,
train_predictions = tau.train.preds,
test_predictions   = tau.test.preds
)
),
simplify = F, USE.NAMES = T)
res <- rbindlist(results)
res[, selection:=names(selections)]
print(res)
rmarkdown::render("~/Desktop/emcite/vignettes/emcite.Rmd")
rmarkdown::render("~/Desktop/emcite/vignettes/emcite.Rmd")
rmarkdown::render("~/Desktop/emcite/vignettes/emcite.Rmd")
