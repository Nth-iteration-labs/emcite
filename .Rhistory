theta = thetas,
n2 = n2,
type = "emcite",
weight_types = 5,
parallel = T
)
source('~/Desktop/emcite/R/models.R')
af(
s.kpn,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = "emcite",
weight_types = 5,
parallel = T
)
source('~/Desktop/emcite/R/models.R')
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.kpn,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5,
parallel = T
), simplify = F, USE.NAMES = T)
print(t-Sys.time())
source('~/Desktop/emcite/R/models.R')
t <- Sys.time()
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.kpn,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5,
parallel = T
), simplify = F, USE.NAMES = T)
print(t-Sys.time())
selections
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.kpn,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5,
parallel = F
), simplify = F, USE.NAMES = T)
print(t-Sys.time())
t <- Sys.time()
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.kpn,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5,
parallel = F
), simplify = F, USE.NAMES = T)
print(t-Sys.time())
thetas <- fit_gradient_descent(X=s.kpn[["experimentation"]][["X"]],
tau_predictions=tau.train.preds$tau,
weight_types = 5)
t <- Sys.time()
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.kpn,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5,
parallel = F
), simplify = F, USE.NAMES = T)
print(t-Sys.time())
source('~/Desktop/emcite/R/models.R')
t <- Sys.time()
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.kpn,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5,
parallel = F
), simplify = F, USE.NAMES = T)
print(t-Sys.time())
source('~/Desktop/emcite/R/models.R')
t <- Sys.time()
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.kpn,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5,
parallel = F
), simplify = F, USE.NAMES = T)
print(t-Sys.time())
source('~/Desktop/emcite/R/models.R')
t <- Sys.time()
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.kpn,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5,
parallel = F
), simplify = F, USE.NAMES = T)
print(t-Sys.time())
source('~/Desktop/emcite/R/models.R')
source('~/Desktop/emcite/R/models.R')
t <- Sys.time()
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.kpn,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5,
parallel = F
), simplify = F, USE.NAMES = T)
print(t-Sys.time())
source('~/Desktop/emcite/R/models.R')
t <- Sys.time()
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.kpn,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5,
parallel = F
), simplify = F, USE.NAMES = T)
print(t-Sys.time())
source('~/Desktop/emcite/R/models.R')
t <- Sys.time()
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.kpn,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5,
parallel = F
), simplify = F, USE.NAMES = T)
print(t-Sys.time())
source('~/Desktop/emcite/R/models.R')
t <- Sys.time()
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.kpn,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5,
parallel = F
), simplify = F, USE.NAMES = T)
print(t-Sys.time())
sselections
selections
n2 <- 50
t <- Sys.time()
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.kpn,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5,
parallel = F
), simplify = F, USE.NAMES = T)
print(t-Sys.time())
source('~/Desktop/emcite/R/models.R')
print(t-Sys.time())
t <- Sys.time()
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.kpn,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5,
parallel = T
), simplify = F, USE.NAMES = T)
print(t-Sys.time())
thetas <- fit_gradient_descent(X=s.kpn[["experimentation"]][["X"]],
tau_predictions=tau.train.preds$tau,
weight_types = 5)
t <- Sys.time()
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.kpn,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5,
parallel = T
), simplify = F, USE.NAMES = T)
print(t-Sys.time())
source('~/Desktop/emcite/R/models.R')
thetas <- fit_gradient_descent(X=s.kpn[["experimentation"]][["X"]],
tau_predictions=tau.train.preds$tau,
weight_types = 5)
t <- Sys.time()
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.kpn,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5,
parallel = T
), simplify = F, USE.NAMES = T)
print(t-Sys.time())
source('~/Desktop/emcite/R/models.R')
thetas <- fit_gradient_descent(X=s.kpn[["experimentation"]][["X"]],
tau_predictions=tau.train.preds$tau,
weight_types = 5)
t <- Sys.time()
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.kpn,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5,
parallel = T
), simplify = F, USE.NAMES = T)
print(t-Sys.time())
source('~/Desktop/emcite/R/models.R')
# With assignment function "turned on"
# s.re <- sampling_data(
#   s.kpn,
#   selections[[1]],
#   active = T,
#   train_predictions  = tau.train.preds,
#   test_predictions   = tau.test.preds
# )
#
# q.re <- retrain_and_metrics(s.re)
results <- sapply(selections,
function(x)
retrain_and_metrics(
sampling_data(
s.kpn,
x,
active = T,
train_predictions  = tau.train.preds,
test_predictions   = tau.test.preds
)
),
simplify = F, USE.NAMES = T)
results
source('~/Desktop/emcite/R/models.R')
source('~/Desktop/emcite/R/models.R')
colnames(dt)
source('~/Desktop/emcite/R/models.R')
source('~/Desktop/emcite/R/models.R')
source('~/Desktop/emcite/R/models.R')
install("~/Desktop/emcite")
devtools:install("~/Desktop/emcite")
devtools::install("~/Desktop/emcite")
# Real dataset, such as KPN
library(data.table)
library(BART)
library(uplift)
library(uplifteval)
# source("~/Desktop/uvt//activelearn/functions.R")
library(emcite)
library(ggplot2)
dt <- fread("~/Desktop/uvt/kpn/data/karba_prepared.csv")
dt[, sum(churn)/.N, by=treatment]
dt[, churn:=ifelse(churn==1, 0, 1)]
set.seed(42)
dt <- fread("~/Desktop/uvt/kpn/data/karba_prepared.csv")
dt[, sum(churn)/.N, by=treatment]
dt[, churn:=ifelse(churn==1, 0, 1)]
# dt <- dt[1:3000]
set.seed(42)
dt[, sum(churn)/.N, by=treatment]
# EMCITE ------------------------------------------------------------------
use_python("/opt/anaconda3/bin/python")
all.res <- list()
for (pairs in list(c(100, 100))){#, c(500,500), c(5000,1000))){
for (run in c(1)){
n1 <- pairs[1]
n2 <- pairs[2]
X <- dt[, .SD, .SDcols = !c('churn', "treatment")]
z <- dt[, treatment]
y <- dt[, churn]
# ite <- rep(0, length(y))
kpn_lista <- list("X" = X,
"y" = y,
"z" = z,
"N" = nrow(X),
p=0,
"real" = T)
kpn_data <- dgp(kpn_lista)
s.kpn <- split_data(kpn_data, n1=n1, real=T)
m1 <- train_model(s.kpn[["experimentation"]])
tau.train.preds <- predict_ite(s.kpn[["experimentation"]], m1)
tau.test.preds  <- predict_ite(s.kpn[["rollout"]], m1)
thetas <- fit_gradient_descent(X=s.kpn[["experimentation"]][["X"]],
tau_predictions=tau.train.preds$tau,
weight_types = 5)
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.kpn,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5,
parallel = T,
), simplify = F, USE.NAMES = T)
# With assignment function "turned on"
# s.re <- sampling_data(
#   s.kpn,
#   selections[[1]],
#   active = T,
#   train_predictions  = tau.train.preds,
#   test_predictions   = tau.test.preds
# )
#
# q.re <- retrain_and_metrics(s.re)
results <- sapply(selections,
function(x)
retrain_and_metrics(
sampling_data(
s.kpn,
x,
active = T,
train_predictions  = tau.train.preds,
test_predictions   = tau.test.preds
)
),
simplify = F, USE.NAMES = T)
all.res[[paste0(n1, "_", n2, "_", run, "_active")]] <- results
results_na <- sapply(selections,
function(x)
retrain_and_metrics(
sampling_data(
s.kpn,
x,
active = F,
train_predictions  = tau.train.preds,
test_predictions   = tau.test.preds
)
),
simplify = F, USE.NAMES = T)
all.res[[paste0(n1, "_", n2, "_", run, "_nonactive")]] <- results_na
saveRDS(all.res, "~/Desktop/uvt/ms_submission/res/kpn_100_1000_5000.Rds")
}
}
# Real dataset, such as KPN
library(data.table)
library(BART)
library(uplift)
library(uplifteval)
# source("~/Desktop/uvt//activelearn/functions.R")
library(emcite)
library(ggplot2)
res <- readRDS("~/Desktop/uvt/ms_submission/res/kpn_100_1000_5000.Rds")
all.res <- readRDS("~/Desktop/uvt/ms_submission/res/kpn_100_1000_5000.Rds")
unl <- lapply(all.res, function(y)
lapply(y, function(x) mean(qini(x)$inc.gains[1:2]))
)
res.dt <- data.table(n = names(unlist(unl)))
res.dt[, c("n1", "n2", "run", "algorithm") := tstrsplit(n, "_|\\.")]
res.dt[, c("n1", "n2", "run") := lapply(.SD, as.integer), .SDcols=c("n1", "n2", "run")]
res.dt
res.dt[, c("n1", "n2", "run", "a","algorithm") := tstrsplit(n, "_|\\.")]
res.dt[, c("n1", "n2", "run") := lapply(.SD, as.integer), .SDcols=c("n1", "n2", "run")]
res.dt[, n:= NULL]
res.dt[, values := unlist(unl)]
ggplot(res.dt, aes(x=n1+n2, y = values, color=algorithm)) + geom_smooth()
res.dt
unl <- lapply(all.res, function(y)
lapply(y, function(x) mean(qini(x)$Qini))
)
res.dt <- data.table(n = names(unlist(unl)))
res.dt[, c("n1", "n2", "run", "a","algorithm") := tstrsplit(n, "_|\\.")]
res.dt[, c("n1", "n2", "run") := lapply(.SD, as.integer), .SDcols=c("n1", "n2", "run")]
res.dt[, n:= NULL]
res.dt[, values := unlist(unl)]
ggplot(res.dt, aes(x=n1+n2, y = values, color=algorithm)) + geom_smooth()
res.dt
res.dt
ggplot(res.dt, aes(x=n1+n2, y = values, color=algorithm, linetype=a)) + geom_smooth()
ggplot(res.dt, aes(x=n1+n2, y = values, color=algorithm, linetype=a)) + geom_smooth(se=F)
all.res <- readRDS("~/Desktop/uvt/ms_submission/res/criteo_100_1000_5000.Rds")
unl <- lapply(all.res, function(y)
lapply(y, function(x) mean(qini(x)$Qini))
)
res.dt <- data.table(n = names(unlist(unl)))
res.dt[, c("n1", "n2", "run", "a","algorithm") := tstrsplit(n, "_|\\.")]
res.dt[, c("n1", "n2", "run") := lapply(.SD, as.integer), .SDcols=c("n1", "n2", "run")]
res.dt[, n:= NULL]
res.dt[, values := unlist(unl)]
ggplot(res.dt, aes(x=n1+n2, y = values, color=algorithm, linetype=a)) + geom_smooth(se=F)
unl
names(unlist(unl))
all.res <- readRDS("~/Desktop/uvt/ms_submission/res/kpn_100_1000_5000.Rds")
unl <- lapply(all.res, function(y)
lapply(y, function(x) mean(qini(x)$Qini))
)
res.dt <- data.table(n = names(unlist(unl)))
res.dt[, c("n1", "n2", "run", "a","algorithm") := tstrsplit(n, "_|\\.")]
res.dt[, c("n1", "n2", "run") := lapply(.SD, as.integer), .SDcols=c("n1", "n2", "run")]
res.dt[, n:= NULL]
res.dt[, values := unlist(unl)]
ggplot(res.dt, aes(x=n1+n2, y = values, color=algorithm, linetype=a)) + geom_smooth(se=F)
all.res <- readRDS("~/Desktop/uvt/ms_submission/res/criteo_100_1000_5000.Rds")
unl <- lapply(all.res, function(y)
lapply(y, function(x) mean(qini(x)$Qini))
)
res.dt <- data.table(n = names(unlist(unl)))
res.dt[, c("n1", "n2", "run", "a","algorithm") := tstrsplit(n, "_|\\.")]
res.dt[, c("n1", "n2", "run") := lapply(.SD, as.integer), .SDcols=c("n1", "n2", "run")]
res.dt[, n:= NULL]
res.dt[, values := unlist(unl)]
ggplot(res.dt, aes(x=n1+n2, y = values, color=algorithm, linetype=a)) + geom_smooth(se=F)
names(unlist(unl))
ggplot(res.dt[n1<500], aes(x=n1+n2, y = values, color=algorithm, linetype=a)) + geom_smooth(se=F)
all.res <- readRDS("~/Desktop/uvt/ms_submission/res/kpn_100_1000_5000.Rds")
unl <- lapply(all.res, function(y)
lapply(y, function(x) mean(qini(x)$Qini))
)
res.dt <- data.table(n = names(unlist(unl)))
res.dt[, c("n1", "n2", "run", "a","algorithm") := tstrsplit(n, "_|\\.")]
res.dt[, c("n1", "n2", "run") := lapply(.SD, as.integer), .SDcols=c("n1", "n2", "run")]
res.dt[, n:= NULL]
res.dt[, values := unlist(unl)]
ggplot(res.dt, aes(x=n1+n2, y = values, color=algorithm, linetype=a)) + geom_smooth(se=F)
library(data.table)
library(BART)
library(uplift)
library(uplifteval)
# source("~/Desktop/uvt//activelearn/functions.R")
library(emcite)
library(ggplot2)
dt <- fread("~/Desktop/uvt/kpn/data/karba_prepared.csv")
dt[, churn:=ifelse(churn==1, 0, 1)]
dt[, sum(churn)/.N, by=treatment]
source('~/Desktop/emcite/R/models.R')
source('~/Desktop/emcite/R/models.R')
source('~/Desktop/emcite/R/models.R')
library(emcite)
library(emcite)
af
source('~/Desktop/emcite/R/models.R')
type
type <- "vmi"
paste0("vnu", type)
library(emcite)
af
