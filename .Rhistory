tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5
))
devtools::load_all(".")
selections <-
lapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.td,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5
))
devtools::load_all(".")
N <- 1005
n1 <- 800
n2 <- 200
td <- dgp(list("N"=N,"p"=4, "covariate"="linear", "y_mean"="linear", "ite"="linear"))
s.td <- split_data(td, n1=n1)
m1 <- train_model(s.td[["experimentation"]])
tau.train.preds <- predict_ite(s.td[["experimentation"]], m1)
tau.test.preds  <- predict_ite(s.td[["rollout"]], m1)
thetas <- fit_gradient_descent(X=s.td[["experimentation"]][["X"]],
tau_predictions=tau.train.preds$tau,
weight_types = 5)
selections <-
lapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.td,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5
))
devtools::load_all(".")
selections <-
lapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.td,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5
))
devtools::load_all(".")
selections <-
lapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.td,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5
))
devtools::load_all(".")
N <- 1005
n1 <- 900
n2 <- 10
td <- dgp(list("N"=N,"p"=4, "covariate"="linear", "y_mean"="linear", "ite"="linear"))
s.td <- split_data(td, n1=n1)
m1 <- train_model(s.td[["experimentation"]])
tau.train.preds <- predict_ite(s.td[["experimentation"]], m1)
tau.test.preds  <- predict_ite(s.td[["rollout"]], m1)
thetas <- fit_gradient_descent(X=s.td[["experimentation"]][["X"]],
tau_predictions=tau.train.preds$tau,
weight_types = 5)
selections <-
lapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.td,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5
))
devtools::load_all(".")
selections <-
lapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.td,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5
))
devtools::load_all(".")
selections <-
lapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.td,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5
))
devtools::load_all(".")
selections <-
lapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.td,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5
))
selections
devtools::load_all(".")
selections <-
lapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.td,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5
))
selections
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.td,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5
), simplify = F, USE.NAMES = T)
#' Create n_1+n_2 dataset
#'
#' @param data
#' @param indexes
#'
sampling_data <- function(data, indexes){
data[["sampling"]][["X"]] <- rbind(data[["experimentation"]][["X"]],
data[["rollout"]][["X"]][indexes,])
data[["sampling"]][["yobs"]] <- c(data[["experimentation"]][["yobs"]],
data[["rollout"]][["yobs"]][indexes])
data[["rollout"]][["X"]] <- data[["rollout"]][["X"]][-indexes,]
data[["rollout"]][["yobs"]] <- data[["rollout"]][["yobs"]][-indexes]
data
}
devtools::load_all(".")
sampling_data(s.td, selections[[1]])
devtools::load_all(".")
names(selections)
pehe_results <- sapply(selections, function(x) retrain_pehe(sampling_data(s.td, x)))
devtools::load_all(".")
pehe_results <- sapply(selections, function(x) retrain_pehe(sampling_data(s.td, x)))
devtools::load_all(".")
pehe_results <- sapply(selections, function(x) retrain_pehe(sampling_data(s.td, x)))
devtools::load_all(".")
pehe_results <- sapply(selections, function(x) retrain_pehe(sampling_data(s.td, x)))
devtools::load_all(".")
pehe_results <- sapply(selections, function(x) retrain_pehe(sampling_data(s.td, x)))
s.dt
s.td[["experimentation"]][['z']]
s.td[["rollout"]][['z']]
s.td[["rollout"]][['z']][[selections[[1]]]]
s.td[["rollout"]][['z']][[selections[1]]]
selections
selections[[1]]
pehe_results <- sapply(selections, function(x) sampling_data(s.td, x))
pehe_results
devtools::load_all(".")
pehe_results <- sapply(selections, function(x) sampling_data(s.td, x))
devtools::load_all(".")
pehe_results <- sapply(selections, function(x) sampling_data(s.td, x))
pehe_results[[1]]
pehe_results[[1]][["sampling"]]
pehe_results[[1]][["rollout"]]
pehe_results[["variance"]]
names(pehe_results)
devtools::load_all(".")
sampling_data(s.td, selections[["variance"]])
test <- sampling_data(s.td, selections[["variance"]])
devtools::load_all(".")
devtools::load_all(".")
test <- sampling_data(s.td, selections[["variance"]])
devtools::load_all(".")
test <- sampling_data(s.td, selections[["variance"]])
test <- sampling_data(s.td, selections[["variance"]])
devtools::load_all(".")
devtools::load_all(".")
test <- sampling_data(s.td, selections[["variance"]])
devtools::load_all(".")
devtools::load_all(".")
test <- sampling_data(s.td, selections[["variance"]])
selections[["variance"]]
test <- sampling_data(s.td, selections[["emcite"]])
test <- sampling_data(s.td, selections[["type-s"]])
devtools::load_all(".")
test <- sampling_data(s.td, selections[["type-s"]])
sampling_data(s.td, selections[["type-s"]])
devtools::load_all(".")
test <- sampling_data(s.td, selections[["type-s"]])
devtools::load_all(".")
test <- sampling_data(s.td, selections[["type-s"]])
selections[[1]]
selections[[2]]
test <- sampling_data(s.td, selections[[1]])
N <- 205
n1 <- 150
n2 <- 10
td <- dgp(list("N"=N,"p"=4, "covariate"="linear", "y_mean"="linear", "ite"="linear"))
s.td <- split_data(td, n1=n1)
m1 <- train_model(s.td[["experimentation"]])
tau.train.preds <- predict_ite(s.td[["experimentation"]], m1)
tau.test.preds  <- predict_ite(s.td[["rollout"]], m1)
thetas <- fit_gradient_descent(X=s.td[["experimentation"]][["X"]],
tau_predictions=tau.train.preds$tau,
weight_types = 5)
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.td,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5
), simplify = F, USE.NAMES = T)
test <- sampling_data(s.td, selections[[1]])
devtools::load_all(".")
sampling_data
devtools::load_all(".")
sampling_data
sampling_data
library(emcite)
devtools::load_all(".")
devtools::load_all(".")
library(emcite)
sampling_data
devtools::load_all(".")
sampling_data
View(sampling_data)
devtools::load_all(".")
View(sampling_data)
devtools::load_all(".")
View(sampling_data)
devtools::load_all(".")
sampling_data
devtools::load_all(".")
sampling_data
N <- 205
n1 <- 150
n2 <- 10
td <- dgp(list("N"=N,"p"=4, "covariate"="linear", "y_mean"="linear", "ite"="linear"))
s.td <- split_data(td, n1=n1)
m1 <- train_model(s.td[["experimentation"]])
tau.train.preds <- predict_ite(s.td[["experimentation"]], m1)
tau.test.preds  <- predict_ite(s.td[["rollout"]], m1)
thetas <- fit_gradient_descent(X=s.td[["experimentation"]][["X"]],
tau_predictions=tau.train.preds$tau,
weight_types = 5)
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.td,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5
), simplify = F, USE.NAMES = T)
test <- sampling_data(s.td, selections[[1]])
use_python("/opt/anaconda3/bin/python")
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.td,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5
), simplify = F, USE.NAMES = T)
devtools::load_all(".")
use_python("/opt/anaconda3/bin/python")
N <- 205
n1 <- 150
n2 <- 10
td <- dgp(list("N"=N,"p"=4, "covariate"="linear", "y_mean"="linear", "ite"="linear"))
s.td <- split_data(td, n1=n1)
m1 <- train_model(s.td[["experimentation"]])
tau.train.preds <- predict_ite(s.td[["experimentation"]], m1)
tau.test.preds  <- predict_ite(s.td[["rollout"]], m1)
thetas <- fit_gradient_descent(X=s.td[["experimentation"]][["X"]],
tau_predictions=tau.train.preds$tau,
weight_types = 5)
thetas
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.td,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5
), simplify = F, USE.NAMES = T)
test <- sampling_data(s.td, selections[[1]])
devtools::load_all(".")
test <- sampling_data(s.td, selections[[1]])
pehe_results <- sapply(selections, function(x) retrain_pehe(sampling_data(s.td, x)),
simplify = F, USE.NAMES = T)
pehe_results <- sapply(selections, function(x) retrain_pehe(sampling_data(s.td, x)),
simplify = F, USE.NAMES = T)
devtools::load_all(".")
pehe_results <- sapply(selections, function(x) retrain_pehe(sampling_data(s.td, x)),
simplify = F, USE.NAMES = T)
pehe_results
use_python("/opt/anaconda3/bin/python")
N <- 205
n1 <- 150
n2 <- 10
td <- dgp(list("N"=N,"p"=4, "covariate"="linear", "y_mean"="linear", "ite"="linear"))
s.td <- split_data(td, n1=n1)
m1 <- train_model(s.td[["experimentation"]])
tau.train.preds <- predict_ite(s.td[["experimentation"]], m1)
tau.test.preds  <- predict_ite(s.td[["rollout"]], m1)
thetas <- fit_gradient_descent(X=s.td[["experimentation"]][["X"]],
tau_predictions=tau.train.preds$tau,
weight_types = 5)
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.td,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5
), simplify = F, USE.NAMES = T)
test <- sampling_data(s.td, selections[[1]])
pehe_results <- sapply(selections, function(x) retrain_pehe(sampling_data(s.td, x)),
simplify = F, USE.NAMES = T)
pehe_results
devtools::use_vignette("emcite")
use_vignette("emcite")
devtools::build_vignette("emcite")
build_vignette("emcite")
devtools::build_vignettes("emcite")
devtools::load_all(".")
devtools::load_all(".")
devtools::build_vignettes()
library(reticulate)
devtools::load_all(".")
devtools::build_vignettes()
library(emcite)
knitr::opts_chunk$set(echo = TRUE)
# Set up python
library(emcite)
knitr::opts_chunk$set(echo = TRUE)
# Set up python
library(emcite)
use_python("/opt/anaconda3/bin/python")
N <- 205
n1 <- 150
n2 <- 10
td <- dgp(list("N"=N,"p"=4, "covariate"="linear", "y_mean"="linear", "ite"="linear"))
library(emcite)
# Set up python
library(emcite)
knitr::opts_chunk$set(echo = TRUE)
use_python("/opt/anaconda3/bin/python")
N <- 205
n1 <- 150
n2 <- 10
td <- dgp(list("N"=N,"p"=4, "covariate"="linear", "y_mean"="linear", "ite"="linear"))
devtools::build()
install.packages(".")
devtools::install()
library(emcite)
use_python("/opt/anaconda3/bin/python")
N <- 205
n1 <- 150
n2 <- 10
td <- dgp(list("N"=N,"p"=4, "covariate"="linear", "y_mean"="linear", "ite"="linear"))
# Set up python
library(emcite)
use_python("/opt/anaconda3/bin/python")
N <- 205
n1 <- 150
n2 <- 10
td <- dgp(list("N"=N,"p"=4, "covariate"="linear", "y_mean"="linear", "ite"="linear"))
# Set up python
library(emcite)
use_python("/opt/anaconda3/bin/python")
N <- 205
n1 <- 150
n2 <- 10
td <- dgp(list("N"=N,"p"=4, "covariate"="linear", "y_mean"="linear", "ite"="linear"))
library(emcite)
knitr::opts_chunk$set(echo = TRUE)
# Set up python
library(emcite)
use_python("/opt/anaconda3/bin/python")
N <- 205
n1 <- 150
n2 <- 10
td <- dgp(list("N"=N,"p"=4, "covariate"="linear", "y_mean"="linear", "ite"="linear"))
fit_gradient_descent
fit_gradient_descent()
?fit_gradient_descent()
# Set up python
library(emcite)
use_python("/opt/anaconda3/bin/python")
N <- 205
n1 <- 150
n2 <- 10
td <- dgp(list("N"=N,"p"=4, "covariate"="linear", "y_mean"="linear", "ite"="linear"))
devtools::load_all(".")
td <- dgp(list("N"=N,"p"=4, "covariate"="linear", "y_mean"="linear", "ite"="linear"))
# Set up python
library(emcite)
use_python("/opt/anaconda3/bin/python")
N <- 205
n1 <- 150
n2 <- 10
td <- dgp(list("N"=N,"p"=4, "covariate"="linear", "y_mean"="linear", "ite"="linear"))
s.td <- split_data(td, n1=n1)
m1 <- train_model(s.td[["experimentation"]])
m1 <- train_model(s.td[["experimentation"]])
tau.train.preds <- predict_ite(s.td[["experimentation"]], m1)
devtools::load_all(".")
# Set up python
library(emcite)
use_python("/opt/anaconda3/bin/python")
N <- 205
n1 <- 150
n2 <- 10
td <- dgp(list("N"=N,"p"=4, "covariate"="linear", "y_mean"="linear", "ite"="linear"))
s.td <- split_data(td, n1=n1)
m1 <- train_model(s.td[["experimentation"]])
tau.train.preds <- predict_ite(s.td[["experimentation"]], m1)
tau.test.preds  <- predict_ite(s.td[["rollout"]], m1)
thetas <- fit_gradient_descent(X=s.td[["experimentation"]][["X"]],
tau_predictions=tau.train.preds$tau,
weight_types = 5)
selections <-
sapply(c("random", "variance", "type-s", "emcite"), function(x)
af(
s.td,
tau_train = tau.train.preds$tau,
tau_test = tau.test.preds$tau,
theta = thetas,
n2 = n2,
type = x,
weight_types = 5
), simplify = F, USE.NAMES = T)
test <- sampling_data(s.td, selections[[1]])
pehe_results <- sapply(selections, function(x) retrain_pehe(sampling_data(s.td, x)),
simplify = F, USE.NAMES = T)
print("pehe_results")
print(pehe_results)
devtools::build()
devtools::build()
devtools::build_vignettes()
library(emcite)
dgp
dgp()
devtools::load_all(".")
dgp()
af
devtools::load_all(".")
library(emcite)
af()
devtools::load_all(".")
knitr::opts_chunk$set(echo = TRUE)
use_python("/opt/anaconda3/bin/python")
devtools::load_all(".")
devtools::load_all(".")
library(emcite)
knitr::opts_chunk$set(echo = TRUE)
# Set up python
library(emcite)
af
dgp
knitr::opts_chunk$set(echo = TRUE)
use_python("/opt/anaconda3/bin/python")
N <- 205
n1 <- 150
n2 <- 10
td <- dgp(list("N"=N,"p"=4, "covariate"="linear", "y_mean"="linear", "ite"="linear"))
